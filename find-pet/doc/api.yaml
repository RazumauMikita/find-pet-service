openapi: 3.0.0
info:
  title: Lost pet service
  description: Service to find lost pets
  version: 1.0.0

servers:
  - url: /

components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      BearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Assigned automatically in the server.
          example: 'b0713603-12d5-4268-ab54-a4e83eb3b7da'
        email:
          type: string
          format: email
          example: 'example@email.com'
        password:
          type: string
          example: passE123!
        name:
          type: string
          example: 'John Travolta'
        country:
          type: string
          example: 'USA'
        city:
          type: string
          example: 'Miami'
        lost:
          type: array
          items:
            $ref: '#/components/schemas/Lost'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - email
        - password
        - name
    Lost:
      type: object
      properties:
        id:
          type: string
          description: Assigned automatically in the server.
          example: 'b0713603-12d5-4268-ab54-a4e83eb3b7da'
          format: uuid
        ownerId:
          type: string
          format: uuid
          example: 'b0713603-12d5-4268-ab54-a4e83eb3b7da'
        isLost:
          type: boolean
          description: 'A lost pet is marked as true, and a found pet is marked as false.'
          example: false
        coordinates:
          type: string
          example: '23.234234, 33.23423424'
        description:
          type: string
          example: 'Description of my pet.'
        images:
          type: array
          items:
            type: string
          description: 'Locations of images.'
          example: 'pet-site.by/public/uploads/b0713603-12d5-4268-ab54-a4e83eb3b7da.jpg'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - description
        - ownerId
security:
  - BearerAuth: []
paths:
  /login:
    post:
      tags:
        - Login
      summary: Login
      description: Logins a user and returns a JWT-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                email:
                  type: string
                  format: email
                  description: User's email
                password:
                  type: string
                  description: User's password
                name:
                  type: string
                  description: User's name
                country:
                  type: string
                  description: User's country
                city:
                  type: string
                  description: User's city
              required:
                - email
                - password
                - name
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Token
                  refreshToken:
                    type: string
                    description: JWT Token
        404:
          description: Incorrect login. User doesn't exist.
        403:
          description: Password is incorrect or expired token.
  /signup:
    post:
      tags:
        - Signup
      summary: Signup
      security: []
      description: Signup a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                email:
                  type: string
                  format: email
                  description: User's email
                name:
                  type: string
                  description: User's name
                country:
                  type: string
                  description: User's country
                city:
                  type: string
                  description: User's city
              required:
                - email
                - password
                - name
      responses:
        200:
          description: Successful sign up.
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Bad request.
        409:
          description: Conflict. User's email already exist.
  /refresh:
    post:
      tags:
        - Refresh
      summary: Refresh
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: example
              type: object
              properties:
                refreshToken:
                  type: string
                  format: uuid
      responses:
        200:
          description: Successful refresh token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT Token
                  refreshToken:
                    type: string
                    description: JWT Token
        403:
          description: Expired token
        400:
          description: Bad request.
  /user:
    get:
      tags:
        - Users
      summary: Get all users
      description: Gets all users
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Users
      summary: Create user
      description: Creates a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                email:
                  type: string
                  description: The user's login
                name:
                  type: string
                password:
                  type: string
                  description: The user's password
                city:
                  type: string
                country:
                  type: string
              required:
                - email
                - name
                - password
      responses:
        201:
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get single user by id
      description: Get single user by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
    put:
      tags:
        - Users
      summary: Update user's properties
      description: Updates user's properties by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                oldPassword:
                  type: string
                  description: The user's old password
                newPassword:
                  type: string
                  description: The user's new password
                name:
                  type: string
                city:
                  type: string
                country:
                  type: string
                email:
                  type: string
              required:
                - oldPassword
                - newPassword
      responses:
        200:
          description: The user has been updated.
          content:
            application/json:
              schema:
                type: object
                title: example
                properties:
                  id:
                    type: string
                    format: uuid
                  login:
                    type: string
                    example: TestUser
                  version:
                    type: integer
                    example: 2
                  createAt:
                    type: integer
                    example: 1655000000
                  updateAt:
                    type: integer
                    example: 1655999999
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: oldPassword is wrong
        404:
          description: User not found

    delete:
      tags:
        - Users
      summary: Delete user
      description: Deletes user by ID.
      responses:
        204:
          description: The user has been deleted
        400:
          description: Bad request. userId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /lost:
    get:
      tags:
        - Lost
      summary: Get lost list
      security: []
      description: Gets all lost list
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lost'
    post:
      tags:
        - Lost
      summary: Add new lost/find pet
      description: Add new lost/find pet
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                ownerId:
                  type: string
                  format: uuid
                isLost:
                  type: boolean
                  description: A lost pet is marked as true, and a found pet is marked as false.
                description:
                  type: string
                  description: Pet's name, appearance, location.
                coordinates:
                  type: string
                  description: Coordinates in the map.
                images:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - description
                - coordinates
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lost'
        400:
          description: Bad request. body does not contain required fields
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /lost/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Lost
      summary: Get single lost by id
      description: Gets single slot by id
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lost'
        400:
          description: Bad request. lostId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Lost was not found.
    put:
      tags:
        - Lost
      summary: Update lost information
      description: Update lost information by UUID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              title: example
              properties:
                ownerId:
                  type: string
                  format: uuid
                  example: b0713603-12d5-4268-ab54-a4e83eb3b7da
                description:
                  type: string
                coordinates:
                  type: string
                  description: Coordinates in the map
                  example: '12312312.123123,123123,123123'
                images:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - description
      responses:
        200:
          description: The lost has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lost'
        400:
          description: Bad request. lostId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Lost was not found.
    delete:
      tags:
        - Lost
      summary: Delete lost
      description: Delete lost from service
      responses:
        204:
          description: Deleted successfully
        400:
          description: Bad request. lostId is invalid (not uuid)
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Lost was not found.
